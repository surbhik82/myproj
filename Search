/ Create a string with the proper quotes and boolean expression
    public string Condition(String s)
    {
        String b = " AND ";
        if (String.Compare(s, "any", true) == 0) b = " OR ";
        else if (String.Compare(s, "bool", true) == 0) b = " ";


        // Get array of strings
        String[] arr = SearchTerms.Value.Split(' ');
        for (int i = 0; i < arr.Length; i++)
        {
            String a = arr[i];
            if (a != "AND" && a != "OR" && a != "NOT" && a != "NEAR")
                arr[i] = "\"" + a + "\"";
        }


        // Rejoin the strings with the boolean expression
        return String.Join(b, arr);
    }
    // Create a command string using Index Server query expressions
    public string CreateCommandString()
    {
        String searchoptions = Request.Form["SearchOptions"];
        String searchdirectory = Request.Form["SearchDirectory"];
        String sortterms = Request.Form["SortTerms"];
        String sortorder = Request.Form["SortOrder"];
        String query = "SELECT DocTitle,Filename,VPath,Rank,Characterization,Write ";
        query += "FROM SCOPE('\"" + searchdirectory + "\"') WHERE ";
        query += "NOT CONTAINS(VPath, '\"_vti\" OR \".xml\"') AND ";
        if (String.Compare(searchoptions, "all", true) == 0 ||  String.Compare(searchoptions, "any", true) == 0 ||  String.Compare(searchoptions, "bool", true) == 0)
        {
            query += "(CONTAINS (Contents, '" + Condition(searchoptions) + "') OR ";
            query += "CONTAINS (DocTitle, '" + Condition(searchoptions) + "')) ";
        }
        else if (String.Compare(searchoptions, "natural", true) == 0)
        {
            query += "(FREETEXT (Contents, '" + SearchTerms.Value + "') OR ";
            query += "FREETEXT (DocTitle, '" + SearchTerms.Value + "')) ";
        }
        else
        {
            query += "(CONTAINS (Contents, '\"" + SearchTerms.Value + "\"') OR ";
            query += "CONTAINS (DocTitle, '\"" + SearchTerms.Value + "\"')) ";
        }
        query += "ORDER BY DocTitle " + sortorder;


        return query;
    }
    public DataSet CreateDataSource()
       {
           // Get the ConnectionString from the Application configuration settings
           String connstr = ConfigurationSettings.AppSettings["ConnectionString"];
           if (connstr == null)
               connstr = "Provider=MSIDXS;Data Source=TechDebt";


           // Create our connection and command objects
           OleDbConnection conn = new OleDbConnection(connstr);
           OleDbCommand cmd = conn.CreateCommand();


           // Create our command and adapter object
           cmd.CommandText = CreateCommandString();
           OleDbDataAdapter adapter = new OleDbDataAdapter(cmd);


           // Fill a DataTable with the results
           DataTable dt = new DataTable("Results");
           int results = 0;
           results = adapter.Fill(dt);


           // Create our DataSet and bind
           DataSet ds = new DataSet("Search");
           ds.Tables.Add(dt);


           return ds;
       }

protected void SearchButton_Click(object sender, EventArgs e)
{
    // Hide controls initially
    //ErrorPanel.Visible = false;
    SearchNoResults.Visible =false;
    SearchResults.Visible =true;
    lbldocfound.Visible = true;
    // Set  page title
    if (IsValid)
       // PageTitle.InnerText = "Search: " + SearchTerms.Value;


    try
    {
        ds = CreateDataSource();
        int results = ds.Tables["Results"].Rows.Count;
        if (results > 0)
        {
            ResultCount.Text = results.ToString();
            SearchGrid.CurrentPageIndex = 0;
            SearchGrid.DataSource = ds;
            SearchGrid.DataBind();
            SearchResults.Visible = true;
            lbldocfound.Visible = true;
        }
        else
        {
            SearchNoResults.Visible = true;
            lbldocfound.Visible = false;
        }
    }
    catch (Exception ex)
    {
        Error = "There was an error processing your search: " + ex.Message;
        return;
    }
}
